hf <- hf %>% filter(mortality_national_comparison != "Other")
hf$mortality_national_comparison <- droplevels(hf$mortality_national_comparison)
sample <- sample.split(hf$hospital_name, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(hf, sample == TRUE)
# Testing Data
test = subset(hf, sample == FALSE)
rf.fit <- randomForest(mortality_national_comparison ~ death_score, data = train)
skim(train)
hf <- df %>% dplyr::select(-provider_id, - meets_criteria_for_meaningful_use_of_eh_rs, -hospital_overall_rating, -state)
set.seed(101)
hf <- hf %>% filter(mortality_national_comparison != "Other") %>% mutate(timecare_score = as.numeric(timecare_score), death_score = as.numeric(death_score))
hf$mortality_national_comparison <- droplevels(hf$mortality_national_comparison)
sample <- sample.split(hf$hospital_name, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(hf, sample == TRUE)
# Testing Data
test = subset(hf, sample == FALSE)
rf.fit <- randomForest(mortality_national_comparison ~ death_score - hospital_name, data = train)
skim(train)
rf.fit <- randomForest(mortality_national_comparison ~ death_score - hospital_name, data = train, na.rm = T)
train = na.rm(train)
train = na.omit(train)
rf.fit <- randomForest(mortality_national_comparison ~ death_score - hospital_name, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ death_score - hospital_name + timecare_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name , data = train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name , data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type , data = train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type , data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison , data = train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison , data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type , data = train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type , data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
hcdeaths %>% group_by(measure_name) %>% count(score == "Not Available") %>% View()
hctimecaredf <- hctimecare %>% filter(measure_name == "Healthcare workers given influenza vaccination") %>% dplyr::select(provider_id, score) %>% rename("vaccination_score" = score)
hctimecare %>% group_by(measure_name) %>% count(score == "Not Available") %>% View()
hctimecaredf <- hctimecare %>% filter(measure_name == "Healthcare workers given influenza vaccination") %>% dplyr::select(provider_id, score) %>% rename("vaccination_score" = score)
df <- inner_join(hcgendf, hctimecaredf, by = "provider_id")
hctimecaredf <- hctimecare %>% filter(measure_name == "Immunization for influenza") %>% dplyr::select(provider_id, score) %>% rename("immunization_score" = score)
df <- inner_join(df, hctimecaredf, by = "provider_id")
hctimecaredf <- hctimecare %>% filter(measure_name == "Average (median) time patients spent in the emergency department before leaving from the visit A lower number of minutes is better") %>% dplyr::select(provider_id, score) %>% rename("timespent_score" = score)
df <- inner_join(df, hctimecaredf, by = "provider_id")
hcdeathsdf <- hcdeaths %>% filter(measure_name == "Serious complications") %>% dplyr::select(provider_id, score) %>% rename("complications_score" = score)
# a <- as.numeric(hcdeathsdf$provider_id)
# a <- is.na(a)
# which(a)
# hcdeathsdf[a,] %>% View()
df$provider_id <- as.character(df$provider_id)
df <- inner_join(df, hcdeathsdf, by = "provider_id")
hf <- df %>% dplyr::select(-provider_id, - meets_criteria_for_meaningful_use_of_eh_rs, -hospital_overall_rating, -state)
set.seed(101)
hf <- hf %>% filter(mortality_national_comparison != "Other") %>% mutate(timecare_score = as.numeric(timecare_score), death_score = as.numeric(death_score))
hf <- df %>% dplyr::select(-provider_id, - meets_criteria_for_meaningful_use_of_eh_rs, -hospital_overall_rating, -state)
set.seed(101)
hf <- hf %>% filter(mortality_national_comparison != "Other") %>% mutate(timespent_score = as.numeric(timespent_score), complications_score = as.numeric(complications_score), immunization_score = as.numeric(immunization_score), vaccination_score = as.numeric(vaccination_score))
hf$mortality_national_comparison <- droplevels(hf$mortality_national_comparison)
sample <- sample.split(hf$hospital_name, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(hf, sample == TRUE)
# Testing Data
test = subset(hf, sample == FALSE)
train = na.omit(train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type , data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison - timeliness_of_care_national_comparison, data = train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison - timeliness_of_care_national_comparison, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
RMSE(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison - timeliness_of_care_national_comparison - readmission_national_comparison, data = train)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison - timeliness_of_care_national_comparison - readmission_national_comparison, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
confusionMatrix(pred, test$mortality_national_comparison)
RMSE(pred, test$mo
importance(rf.fit)
rf.fit <- randomForest(mortality_national_comparison ~ . - hospital_name - emergency_services - hospital_type - effectiveness_of_care_national_comparison - timeliness_of_care_national_comparison - readmission_national_comparison - efficient_use_of_medical_imaging_national_comparison, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
confusionMatrix(pred, test$mortality_national_comparison)[1]
confusionMatrix(pred, test$mortality_national_comparison)[2]
confusionMatrix(pred, test$mortality_national_comparison)[2:3]
confusionMatrix(pred, test$mortality_national_comparison)[2:4]
confusionMatrix(pred, test$mortality_national_comparison)[2:6]
confusionMatrix(pred, test$mortality_national_comparison)
importance(rf.fit)
rf.fit <- randomForest(mortality_national_comparison ~ complications_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ complications_score + timespent_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + vaccination_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
skim(train)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + readmission_national_comparison, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score, data = train)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score, data = train)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score, data = train, ntrees = 1500)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
lda.fit <- lda(mortality_national_comparison ~ timespent_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score, data = train)
confusionMatrix(pred$class, test$mortality_national_comparison)
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + immunization_score, data = train)
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + immunization_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + immunization_score + vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + immunization_score + vaccination_score + immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + immunization_score+ immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score:complications_score + immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ timespent_score + complications_score + immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ complications_score + immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ immunization_score:vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- qda(mortality_national_comparison ~ immunization_score + vaccination_score, data = train)
pred <- predict(lda.fit, newdata = test, type = "class")
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- lda(mortality_national_comparison ~ immunization_score + vaccination_score, data = train)
confusionMatrix(pred$class, test$mortality_national_comparison)
lda.fit <- lda(mortality_national_comparison ~ immunization_score + vaccination_score + immunization_score : vaccination_score, data = train)
confusionMatrix(pred$class, test$mortality_national_comparison)
hist(df$complications_score)
hist(hf$vaccination_score)
hist(hf$vaccination_score)
hist(hf$immunization_score)
hist(hf$timespent_score)
hist(hf$complications_score)
hf <- df %>% dplyr::select(-provider_id, - meets_criteria_for_meaningful_use_of_eh_rs, -hospital_overall_rating, -state)
set.seed(101)
hf <- hf %>% filter(mortality_national_comparison != "Other") %>% mutate(timespent_score = log(as.numeric(timespent_score)), complications_score = log(as.numeric(complications_score)), immunization_score = log(as.numeric(immunization_score)), vaccination_score = log(as.numeric(vaccination_score)))
hf$mortality_national_comparison <- droplevels(hf$mortality_national_comparison)
hist(hf$vaccination_score)
sample <- sample.split(hf$hospital_name, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(hf, sample == TRUE)
# Testing Data
test = subset(hf, sample == FALSE)
train = na.omit(train)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + complications_score + vaccination_score, data = train, ntrees = 1500)
hist(train$complications_score)
hist(train$timespent_score)
hf <- df %>% dplyr::select(-provider_id, - meets_criteria_for_meaningful_use_of_eh_rs, -hospital_overall_rating, -state)
set.seed(101)
hf <- hf %>% filter(mortality_national_comparison != "Other") %>% mutate(timespent_score = log(as.numeric(timespent_score)), complications_score = log(as.numeric(complications_score)), immunization_score = log(as.numeric(immunization_score)), vaccination_score = log(as.numeric(vaccination_score)))
hf$mortality_national_comparison <- droplevels(hf$mortality_national_comparison)
hist(hf$vaccination_score)
sample <- sample.split(hf$hospital_name, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(hf, sample == TRUE)
# Testing Data
test = subset(hf, sample == FALSE)
train = na.omit(train)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + complications_score + vaccination_score, data = train, ntrees = 500)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score, data = train, ntrees = 500)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score, data = train, ntrees = 500)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + complications_score, data = train, ntrees = 500)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + complications_score + vaccination_score, data = train, ntrees = 500)
hist(train$vaccination_score
)
hf <- df %>% dplyr::select(-provider_id, - meets_criteria_for_meaningful_use_of_eh_rs, -hospital_overall_rating, -state)
set.seed(101)
hf <- hf %>% filter(mortality_national_comparison != "Other") %>% mutate(timespent_score = log(as.numeric(timespent_score)), complications_score = log(as.numeric(complications_score)), immunization_score = log(as.numeric(immunization_score)), vaccination_score = as.numeric(vaccination_score))
hf$mortality_national_comparison <- droplevels(hf$mortality_national_comparison)
hist(hf$vaccination_score)
sample <- sample.split(hf$hospital_name, SplitRatio = 0.70) # SplitRatio = percent of sample==TRUE
# Training Data
train = subset(hf, sample == TRUE)
# Testing Data
test = subset(hf, sample == FALSE)
train = na.omit(train)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + complications_score + vaccination_score, data = train, ntrees = 500)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
hist(train$vaccination_score)
hist(log(train$vaccination_score))
hist(log(log(train$vaccination_score)))
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score + immunization_score + complications_score, data = train, ntrees = 500)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
rf.fit <- randomForest(mortality_national_comparison ~ timespent_score, data = train, ntrees = 500)
pred <- predict(rf.fit, newdata = test, type = "class")
confusionMatrix(pred, test$mortality_national_comparison)
df
df[df=="Not Available"] = NA
names(df)
df %>% group_by(state) %>%
summarise(mean(vaccination_score),
mean(immunization_score),
mean(timespent_score),
mean(complications_score)) %>% gt()
library(tidyverse)
library(ggplot2)
library(Amelia)
library(data.table)
library(readr)
library(janitor)
library(skimr)
library(caTools)
library(caret)
library(randomForest)
library(MASS)
library(data.table)
library(gt)
df[df=="Not Available"] = NA
df %>% group_by(state) %>%
summarise(mean(vaccination_score),
mean(immunization_score),
mean(timespent_score),
mean(complications_score)) %>% gt()
str(df)
df_summ <- df %>% select(-hospital_name) %>% mutate_if(is.character(), as.numeric())
df_summ <- df %>% dplyr::select(-hospital_name) %>% mutate_if(is.character(), as.numeric())
df_summ <- df %>% dplyr::select(-hospital_name) %>% mutate_if(is.character, as.numeric)
df %>% group_by(state) %>%
summarise(mean(vaccination_score),
mean(immunization_score),
mean(timespent_score),
mean(complications_score)) %>% gt()
df_summ %>% group_by(state) %>%
summarise(mean(vaccination_score),
mean(immunization_score),
mean(timespent_score),
mean(complications_score)) %>% gt()
df_summ %>% group_by(state) %>%
summarise(mean(vaccination_score, na.rm = T),
mean(immunization_score, na.rm = T),
mean(timespent_score, na.rm = T),
mean(complications_score, na.rm = T)) %>% gt()
df_summ %>% group_by(state) %>%
summarise("mean_vacc" = mean(vaccination_score, na.rm = T),
"mean_imm" = mean(immunization_score, na.rm = T),
"mean_time" = mean(timespent_score, na.rm = T),
"mean_comp" = mean(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_comp)) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_vacc" = mean(vaccination_score, na.rm = T),
"mean_imm" = mean(immunization_score, na.rm = T),
"mean_time" = mean(timespent_score, na.rm = T),
"mean_comp" = mean(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_time)) %>%
head(5) %>%
gt()
df_summ %>% dplyr::filter(state = "PR")
df_summ %>% dplyr::filter(state == "PR")
df_summ %>% dplyr::filter(state == "PR") %>% View()
df_summ %>% group_by(state) %>% count(is.na(vaccination_score))
df_summ %>% group_by(state) %>% count(sum(is.finite(vaccination_score)))
df_summ %>% group_by(state) %>% count(sum(is.finite(vaccination_score))) %>% View()
View(df_summ %>% dplyr::filter(state == "PR"))
View(df_summ %>% dplyr::filter(state == "AS"))
df_summ %>% group_by(state) %>% count(sum(is.finite(vaccination_score)),
sum(is.finite(immunization_score)),
sum(is.finite(timespent_score)),
sum(is.finite(complications_score)))%>% View()
sum(3,2,4)
df_summ %>% group_by(state) %>% filter(sum(sum(is.finite(vaccination_score)),
sum(is.finite(immunization_score)),
sum(is.finite(timespent_score)),
sum(is.finite(complications_score))) > 120)
df_summ %>% group_by(state) %>% filter(sum(sum(is.finite(vaccination_score)),
sum(is.finite(immunization_score)),
sum(is.finite(timespent_score)),
sum(is.finite(complications_score))) > 120) %>% View()
df_summ <- df_summ %>% group_by(state) %>% filter(sum(sum(is.finite(vaccination_score)),
sum(is.finite(immunization_score)),
sum(is.finite(timespent_score)),
sum(is.finite(complications_score))) > 120)
df_summ %>% group_by(state) %>%
summarise("mean_vacc" = mean(vaccination_score, na.rm = T),
"mean_imm" = mean(immunization_score, na.rm = T),
"mean_time" = mean(timespent_score, na.rm = T),
"mean_comp" = mean(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_vacc" = mean(vaccination_score, na.rm = T),
"mean_imm" = mean(immunization_score, na.rm = T),
"mean_time" = mean(timespent_score, na.rm = T),
"mean_comp" = mean(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_time" = mean(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_comp" = mean(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_comp)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_imm" = mean(immunization_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_vacc" = mean(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_vacc)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_time" = mean(timespent_score, na.rm = T)) %>%
hist(mean_time)
df_summ %>% group_by(state) %>%
summarise("mean_time" = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_time" = mean(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("median_time" = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time)) %>%
head(5) %>%
gt()
df[df=="Not Available"] = NA
df_summ <- df %>% dplyr::select(-hospital_name) %>% mutate_if(is.character, as.numeric)
df_summ %>% group_by(state) %>% count(sum(is.finite(vaccination_score)),
sum(is.finite(immunization_score)),
sum(is.finite(timespent_score)),
sum(is.finite(complications_score)))
df_summ <- df_summ %>% group_by(state) %>% filter(sum(sum(is.finite(vaccination_score)),
sum(is.finite(immunization_score)),
sum(is.finite(timespent_score)),
sum(is.finite(complications_score))) > 120)
df_summ %>% group_by(state) %>%
summarise("mean_time" = mean(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("median_time" = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_comp" = mean(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_comp)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("median_comp" = median(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(median_comp)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_imm" = mean(immunization_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("median_imm" = median(immunization_score, na.rm = T)) %>%
dplyr::arrange(desc(median_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("mean_vacc" = mean(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(mean_vacc)) %>%
head(5) %>%
gt()
df_summ %>% group_by(state) %>%
summarise("median_vacc" = median(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(median_vacc)) %>%
head(5) %>%
gt()
fun <- function(x, y){
df_summ %>% group_by(x) %>%
summarise(y = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(y)) %>%
head(5) %>%
gt()
}
fun(state, timespent_score)
fun(x = state, timespent_score)
df_summ %>% group_by(hospital_type) %>%
summarise("median_time" = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_type) %>%
summarise("median_comp" = median(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(median_comp)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_type) %>%
summarise("median_imm" = median(immunization_score, na.rm = T)) %>%
dplyr::arrange(desc(median_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_type) %>%
summarise("median_vacc" = median(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(median_vacc)) %>%
head(5) %>%
gt()
df_summary %>% dplyr::filter(hospital_type == "Childrens")
df_summ %>% dplyr::filter(hospital_type == "Childrens") %>% View()
#######
df_summ <- df %>% dplyr::select(-hospital_name) %>% mutate_if(is.character, as.numeric)
df_summ %>% group_by(hospital_type) %>%
summarise("median_time" = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_type) %>%
summarise("median_comp" = median(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(median_comp)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_type) %>%
summarise("median_imm" = median(immunization_score, na.rm = T)) %>%
dplyr::arrange(desc(median_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_type) %>%
summarise("median_vacc" = median(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(median_vacc)) %>%
head(5) %>%
gt()
df_summ <- df %>% dplyr::select(-hospital_name) %>% mutate_if(is.character, as.numeric)
df_summ %>% group_by(hospital_ownership) %>%
summarise("median_time" = median(timespent_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_ownership) %>%
summarise("median_comp" = median(complications_score, na.rm = T)) %>%
dplyr::arrange(desc(median_comp)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_ownership) %>%
summarise("median_imm" = median(immunization_score, na.rm = T)) %>%
dplyr::arrange(desc(median_imm)) %>%
head(5) %>%
gt()
df_summ %>% group_by(hospital_ownership) %>%
summarise("median_vacc" = median(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(median_vacc)) %>%
head(5) %>%
gt()
table(df_summ$hospital_ownership)
df_summ %>% group_by(hospital_ownership) %>%
summarise("median_time" = median(timespent_score, na.rm = T),
"median_vacc" = median(vaccination_score, na.rm = T)) %>%
dplyr::arrange(desc(median_time), desc(median_vacc)) %>%
head(5) %>%
gt()
